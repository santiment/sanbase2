defmodule SanbaseWeb.ProjectDataController do
  use SanbaseWeb, :controller

  alias Sanbase.Model.Project
  alias Sanbase.Model.Project.SocialVolumeQuery
  require Logger

  def data(conn, _params) do
    cache_key = {__MODULE__, __ENV__.function} |> Sanbase.Cache.hash()
    {:ok, data} = Sanbase.Cache.get_or_store(cache_key, &get_data/0)

    conn
    |> put_resp_header("content-type", "application/json; charset=utf-8")
    |> Plug.Conn.send_resp(200, data)
  end

  defp get_data() do
    data =
      Project.List.projects(
        preload?: true,
        preload: [
          :infrastructure,
          :github_organizations,
          :contract_addresses,
          :social_volume_query,
          :latest_coinmarketcap_data
        ]
      )
      |> Enum.map(fn project ->
        {:ok, github_organizations} = Project.github_organizations(project)
        infrastructure_code = project_to_infrastructure_code(project)
        {contract, decimals} = project_to_contract_decimals(project)
        rank = project_to_rank(project)
        social_volume_query = project_to_social_volume_query(project)

        project_json =
          %{
            slug: project.slug,
            ticker: project.ticker,
            name: project.name,
            infrastructure: infrastructure_code,
            github_organizations: github_organizations |> Enum.sort() |> Enum.join(","),
            contract: contract,
            decimals: decimals,
            social_volume_query: social_volume_query,
            rank: rank,
            telegram_chat_id: project.telegram_chat_id
          }
          |> Jason.encode!()

        [project_json, "\n"]
      end)

    {:ok, data}
  end

  defp project_to_infrastructure_code(project) do
    case project do
      %{infrastructure: %{code: infr_code}} -> infr_code || ""
      _ -> ""
    end
  end

  defp project_to_social_volume_query(project) do
    case project.social_volume_query do
      %SocialVolumeQuery{} = svq -> svq.query || svq.autogenerated_query
      nil -> ""
    end
  end

  defp project_to_rank(project) do
    case project.latest_coinmarketcap_data do
      %{} = lcd -> lcd.rank
      nil -> nil
    end
  end

  defp project_to_contract_decimals(project) do
    case Project.contract_info(project) do
      {:ok, contract, decimals} -> {contract, decimals}
      _ -> {"", 0}
    end
  end
end
